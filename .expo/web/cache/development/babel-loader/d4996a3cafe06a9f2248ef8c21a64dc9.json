{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { logToConsole } from 'react-native/Libraries/Utilities/RCTLog';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getPokemon = function getPokemon() {\n    var response, json;\n    return _regeneratorRuntime.async(function getPokemon$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://pokeapi.co/api/v2/pokemon?limit=10&offset=20'));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setData(json.results);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 13:\n            _context.prev = 13;\n            setLoading(false);\n            return _context.finish(13);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10, 13, 16]], Promise);\n  };\n\n  useEffect(function () {\n    getPokemon();\n  }, []);\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return console.log(\"Clicked the button\");\n      },\n      children: _jsx(Image, {\n        source: require(\"./assets/pokemon-logo.png\")\n      })\n    }), _jsxs(Text, {\n      children: ['\\n', '\\n', \"See if you can catch 'em all!\", '\\n', '\\n']\n    }), isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(_ref, index) {\n        var id = _ref.id;\n        return index;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(Text, {\n          children: [item.name, '\\n', item.url, '\\n']\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0\n  }\n});","map":{"version":3,"sources":["C:/Users/Kevin/Coding/Pokemon/App.js"],"names":["React","useEffect","useState","logToConsole","App","isLoading","setLoading","data","setData","getPokemon","fetch","response","json","results","console","error","styles","container","log","require","index","id","item","name","url","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","Platform","OS","StatusBar","currentHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;;;AAGA,SAASC,YAAT,QAA6B,yCAA7B;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAgCF,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBJ,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEOC,KAAK,CAAC,sDAAD,CAFZ;;AAAA;AAEVC,YAAAA,QAFU;AAAA;AAAA,6CAGGA,QAAQ,CAACC,IAAT,EAHH;;AAAA;AAGVA,YAAAA,IAHU;AAIhBJ,YAAAA,OAAO,CAACI,IAAI,CAACC,OAAN,CAAP;AAJgB;AAAA;;AAAA;AAAA;AAAA;AAMfC,YAAAA,OAAO,CAACC,KAAR;;AANe;AAAA;AAQfT,YAAAA,UAAU,CAAC,KAAD,CAAV;AARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAYAL,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEO,MAAM,CAACC,SAA5B;AAAA,eACE,KAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE;AAAA,eAAMH,OAAO,CAACI,GAAR,CAAY,oBAAZ,CAAN;AAAA,OAA3B;AAAA,gBACE,KAAC,KAAD;AAAO,QAAA,MAAM,EAAEC,OAAO;AAAtB;AADF,MADF,EAII,MAAC,IAAD;AAAA,iBAAO,IAAP,EAAa,IAAb,mCAAgD,IAAhD,EAAsD,IAAtD;AAAA,MAJJ,EAKGd,SAAS,GAAG,KAAC,iBAAD,KAAH,GACR,KAAC,QAAD;AACE,MAAA,IAAI,EAAEE,IADR;AAEE,MAAA,YAAY,EAAE,4BAASa,KAAT;AAAA,YAAGC,EAAH,QAAGA,EAAH;AAAA,eAAmBD,KAAnB;AAAA,OAFhB;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGE,IAAH,SAAGA,IAAH;AAAA,eACV,MAAC,IAAD;AAAA,qBAAOA,IAAI,CAACC,IAAZ,EAAkB,IAAlB,EAAwBD,IAAI,CAACE,GAA7B,EAAkC,IAAlC;AAAA,UADU;AAAA;AAHd,MANJ;AAAA,IADF;AAiBD;AAED,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,SAAS,EAAE;AACTU,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,UAAU,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BC,SAAS,CAACC,aAAtC,GAAsD;AAJzD;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import { StatusBar } from 'expo-status-bar';\nimport { ActivityIndicator, FlatList, StyleSheet, StatusBar, Text, Platform, View, Image, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { logToConsole } from 'react-native/Libraries/Utilities/RCTLog';\n\nexport default function App() {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getPokemon = async () => {\n    try {\n     const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=10&offset=20');\n     const json = await response.json();\n     setData(json.results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getPokemon();\n  }, []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <TouchableOpacity onPress={() => console.log(\"Clicked the button\")}>\n        <Image source={require('./assets/pokemon-logo.png')} />\n        </TouchableOpacity>\n        <Text>{'\\n'}{'\\n'}See if you can catch 'em all!{'\\n'}{'\\n'}</Text>\n      {isLoading ? <ActivityIndicator/> : (\n        <FlatList\n          data={data}\n          keyExtractor={({ id }, index) => index}\n          renderItem={({ item }) => (\n            <Text>{item.name}{'\\n'}{item.url}{'\\n'}</Text>\n          )}\n        />\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0\n  },\n});\n"]},"metadata":{},"sourceType":"module"}